// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "todoz": Model Helpers
//
// Command:
// $ goagen
// --design=github.com/konchanSS/Todoz/design
// --out=$(GOPATH)/src/github.com/konchanSS/Todoz
// --version=v1.2.0-dirty

package models

import (
	"context"
	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	"github.com/konchanSS/Todoz/app"
	"time"
)

// MediaType Retrieval Functions

// ListTodo returns an array of view: default.
func (m *TodoDB) ListTodo(ctx context.Context) []*app.Todo {
	defer goa.MeasureSince([]string{"goa", "db", "todo", "listtodo"}, time.Now())

	var native []*Todo
	var objs []*app.Todo
	err := m.Db.Scopes().Table(m.TableName()).Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing Todo", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.TodoToTodo())
	}

	return objs
}

// TodoToTodo loads a Todo and builds the default view of media type Todo.
func (m *Todo) TodoToTodo() *app.Todo {
	todo := &app.Todo{}
	todo.Body = m.Body
	todo.ID = m.ID
	todo.IsFinished = m.IsFinished

	return todo
}

// OneTodo loads a Todo and builds the default view of media type Todo.
func (m *TodoDB) OneTodo(ctx context.Context, id int) (*app.Todo, error) {
	defer goa.MeasureSince([]string{"goa", "db", "todo", "onetodo"}, time.Now())

	var native Todo
	err := m.Db.Scopes().Table(m.TableName()).Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting Todo", "error", err.Error())
		return nil, err
	}

	view := *native.TodoToTodo()
	return &view, err
}
