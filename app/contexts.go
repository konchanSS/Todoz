// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "todoz": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/konchanSS/Todoz/design
// --out=$(GOPATH)/src/github.com/konchanSS/Todoz
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// CreateTodosContext provides the todos create action context.
type CreateTodosContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Body string
}

// NewCreateTodosContext parses the incoming request URL and body, performs validations and creates the
// context used by the todos controller create action.
func NewCreateTodosContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateTodosContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateTodosContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramBody := req.Params["body"]
	if len(paramBody) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("body"))
	} else {
		rawBody := paramBody[0]
		rctx.Body = rawBody
	}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateTodosContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateTodosContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// DeleteTodosContext provides the todos delete action context.
type DeleteTodosContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewDeleteTodosContext parses the incoming request URL and body, performs validations and creates the
// context used by the todos controller delete action.
func NewDeleteTodosContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteTodosContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteTodosContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteTodosContext) OK(r *Todo) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/todo.+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteTodosContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteTodosContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// DeleteAllTodosContext provides the todos delete all action context.
type DeleteAllTodosContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewDeleteAllTodosContext parses the incoming request URL and body, performs validations and creates the
// context used by the todos controller delete all action.
func NewDeleteAllTodosContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteAllTodosContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteAllTodosContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteAllTodosContext) OK(r *Todo) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/todo.+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteAllTodosContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// ListTodosContext provides the todos list action context.
type ListTodosContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListTodosContext parses the incoming request URL and body, performs validations and creates the
// context used by the todos controller list action.
func NewListTodosContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListTodosContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListTodosContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListTodosContext) OK(r TodoCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/todo.+json; type=collection")
	if r == nil {
		r = TodoCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListTodosContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// ShowTodosContext provides the todos show action context.
type ShowTodosContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewShowTodosContext parses the incoming request URL and body, performs validations and creates the
// context used by the todos controller show action.
func NewShowTodosContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowTodosContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowTodosContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowTodosContext) OK(r *Todo) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/todo.+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowTodosContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowTodosContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UpdateTodosContext provides the todos update action context.
type UpdateTodosContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Body       string
	ID         int
	IsFinished bool
}

// NewUpdateTodosContext parses the incoming request URL and body, performs validations and creates the
// context used by the todos controller update action.
func NewUpdateTodosContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateTodosContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateTodosContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramBody := req.Params["body"]
	if len(paramBody) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("body"))
	} else {
		rawBody := paramBody[0]
		rctx.Body = rawBody
	}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	paramIsFinished := req.Params["is_finished"]
	if len(paramIsFinished) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("is_finished"))
	} else {
		rawIsFinished := paramIsFinished[0]
		if isFinished, err2 := strconv.ParseBool(rawIsFinished); err2 == nil {
			rctx.IsFinished = isFinished
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("is_finished", rawIsFinished, "boolean"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateTodosContext) OK(r *Todo) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/todo.+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateTodosContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateTodosContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}
