// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "todoz": todos Resource Client
//
// Command:
// $ goagen
// --design=github.com/konchanSS/Todoz/design
// --out=$(GOPATH)/src/github.com/konchanSS/Todoz
// --version=v1.2.0-dirty

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// CreateTodosPath computes a request path to the create action of todos.
func CreateTodosPath() string {

	return fmt.Sprintf("/todos")
}

// Todoの作成
func (c *Client) CreateTodos(ctx context.Context, path string, body string) (*http.Response, error) {
	req, err := c.NewCreateTodosRequest(ctx, path, body)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateTodosRequest create the request corresponding to the create action endpoint of the todos resource.
func (c *Client) NewCreateTodosRequest(ctx context.Context, path string, body string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	values.Set("body", body)
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// DeleteTodosPath computes a request path to the delete action of todos.
func DeleteTodosPath(id int) string {
	param0 := strconv.Itoa(id)

	return fmt.Sprintf("/todos/%s", param0)
}

// Todoの削除
func (c *Client) DeleteTodos(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteTodosRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteTodosRequest create the request corresponding to the delete action endpoint of the todos resource.
func (c *Client) NewDeleteTodosRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// DeleteAllTodosPath computes a request path to the delete all action of todos.
func DeleteAllTodosPath() string {

	return fmt.Sprintf("/todos/")
}

// Todoの全削除
func (c *Client) DeleteAllTodos(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteAllTodosRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteAllTodosRequest create the request corresponding to the delete all action endpoint of the todos resource.
func (c *Client) NewDeleteAllTodosRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListTodosPath computes a request path to the list action of todos.
func ListTodosPath() string {

	return fmt.Sprintf("/todos/")
}

// TodoList一覧
func (c *Client) ListTodos(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListTodosRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListTodosRequest create the request corresponding to the list action endpoint of the todos resource.
func (c *Client) NewListTodosRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowTodosPath computes a request path to the show action of todos.
func ShowTodosPath(id int) string {
	param0 := strconv.Itoa(id)

	return fmt.Sprintf("/todos/%s", param0)
}

// Todoの詳細
func (c *Client) ShowTodos(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowTodosRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowTodosRequest create the request corresponding to the show action endpoint of the todos resource.
func (c *Client) NewShowTodosRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateTodosPath computes a request path to the update action of todos.
func UpdateTodosPath(id int) string {
	param0 := strconv.Itoa(id)

	return fmt.Sprintf("/todos/%s", param0)
}

// Todoの更新
func (c *Client) UpdateTodos(ctx context.Context, path string, body string, isFinished bool) (*http.Response, error) {
	req, err := c.NewUpdateTodosRequest(ctx, path, body, isFinished)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateTodosRequest create the request corresponding to the update action endpoint of the todos resource.
func (c *Client) NewUpdateTodosRequest(ctx context.Context, path string, body string, isFinished bool) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	values.Set("body", body)
	tmp8 := strconv.FormatBool(isFinished)
	values.Set("is_finished", tmp8)
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
